#!/bin/sh

# --- Helper ---
indent() {
    sed -u 's/^/       /'
}

cmd() {
    COMMAND=$1
    
    echo "[exec] $COMMAND" | indent
    $COMMAND
    STATUS=$?

    if [ $STATUS -ne 0 ]; then
        echo "Command execution failed with: $STATUS"
        exit $STATUS
    fi
}

# --- Directories ---
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

echo "Build content:" | indent
ls -al "$BUILD_DIR"

echo "Cache content:" | indent
ls -al "$CACHE_DIR"

echo "ENV content:" | indent
ls -al "$ENV_DIR"

# --- Variables ---

export RUSTUP_HOME="$CACHE_DIR/rustup_home"
export CARGO_HOME="$CACHE_DIR/cargo_home"
export CARGO_BIN_DIR="$CARGO_HOME/bin"
export CARGO_BIN="$CARGO_BIN_DIR/cargo"
export PATH="$CARGO_HOME_DIR:$PATH"
export CARGO_TARGET_DIR="$CACHE_DIR/target"

if [ -f "$ENV_DIR/RUST_TARGET" ]; then
    RUST_TARGET="$(cat $ENV_DIR/RUST_TARGET)"
else
    echo ""
    echo "No RUST_TARGET env-var set!" | indent
    echo "Setting to default value." | indent
    
    RUST_TARGET="x86_64-unknown-linux-gnu"
    echo "[env] RUST_TARGET: $RUST_TARGET" | indent
fi

if [ -f "$ENV_DIR/RUST_CHANNEL" ]; then
    RUST_CHANNEL="$(cat $ENV_DIR/RUST_CHANNEL)"
else
    echo ""
    echo "No RUST_CHANNEL env-var set!" | indent
    echo "Setting to default value." | indent
    
    RUST_CHANNEL="stable"
    echo "[env] RUST_CHANNEL: $RUST_CHANNEL" | indent
fi

RUST_TOOLCHAIN="$RUST_CHANNEL-$RUST_TARGET"

if [ -f "$ENV_DIR/CARGO_WORKSPACE" ]; then
    CARGO_WORKSPACE="$(cat $ENV_DIR/CARGO_WORKSPACE)"
else
    echo ""
    echo "No CARGO_WORKSPACE env-var set!" | indent
    echo "Assuming root to hold cargo workspace." | indent
    CARGO_WORKSPACE="."
fi

if [ -f "$ENV_DIR/MANIFEST_PATH" ]; then
    MANIFEST_PATH="$(cat $ENV_DIR/MANIFEST_PATH)"
else
    echo ""
    echo "No MANIFEST_PATH env-var set!" | indent
    echo "Assuming root to hold cargo manifest." | indent
    MANIFEST_PATH="Cargo.toml"
fi

CARGO_FULL_MANIFEST_PATH="$BUILD_DIR/$CARGO_WORKSPACE/$MANIFEST_PATH"

if [ -f "$ENV_DIR/GIT_SSH_KEY" ]; then
    GIT_SSH_KEY="$(cat $ENV_DIR/GIT_SSH_KEY)"
else
    echo ""
    echo "No GIT_SSH_KEY env-var set!" | indent
    echo "Checking out submodules might not work." | indent
fi

if [ -f "$ENV_DIR/GIT_URL" ]; then
    GIT_URL="$(cat $ENV_DIR/GIT_URL)"
else
    echo ""
    echo "No GIT_URL env-var set!" | indent
    echo "Checking out submodules might not work." | indent
fi

if [ -f "$ENV_DIR/REMOTE_BRANCH" ]; then
    REMOTE_BRANCH="$(cat $ENV_DIR/REMOTE_BRANCH)"
else
    echo ""
    echo "No REMOTE_BRANCH env-var set!" | indent
    echo "Will try to determine the default branch." | indent
fi

# --- Check Cache ---
echo "-----> Checking cache" 

if [ ! -d "$CACHE_DIR" ]; then
    echo ""
    echo "Did not find cache directory!" | indent
    mkdir -p "$CACHE_DIR"
fi

# --- Check for submodules ---
echo "-----> Checking and updating submodules"

# Install SSH Key 
mkdir -p ~/.ssh
ssh-keyscan -H github.com >> ~/.ssh/known_hosts 2> /dev/null
cp "$ENV_DIR/GIT_SSH_KEY" ~/.ssh/id_rsa
echo >> ~/.ssh/id_rsa
chmod 600 ~/.ssh/id_rsa

# SSH Settings (disable warnings)
echo "Host *" >> ~/.ssh/config
echo "   StrictHostKeyChecking no" >> ~/.ssh/config
echo "   UserKnownHostsFile /dev/null" >> ~/.ssh/config
echo "   LogLevel ERROR" >> ~/.ssh/config

# Checkout submodules
cd "$BUILD_DIR"

# Clean build dir (we need to checkout it again ...)
rm -rf *

# Somehow the repository is not initialized on Heroku?
git init
git remote add origin "$GIT_URL"
git fetch origin

# Get remote default branch
DEFAULT_BRANCH="$(git remote show upstream | grep 'HEAD branch' | sed 's/.*: //')"

# Determine branch to pull on
if [ -z "$REMOTE_BRANCH" ]; then
    BRANCH="$DEFAULT_BRANCH"
else
    BRANCH="$REMOTE_BRANCH"
fi

# Pull
git pull origin "$BRANCH"

# Update and initialize submodules
git submodule update --init --recursive | indent
git submodule status | indent
cd ".."

ls -al "$BUILD_DIR"

# --- Rust installation ---
echo "-----> Checking Rust, Rustup and Cargo"

if [ -d "$RUSTUP_HOME" ] && [ -d "$CARGO_HOME" ]; then
    echo "Found rustup and cargo home in cache; Performing updates ..." | indent
    
    cmd "rustup self update"
    cmd "rustup update "
    cmd "rustup default $RUST_TOOLCHAIN"
else
    echo "Failed finding rustup or cargo home in cache; Performing installation ..." | indent

    RUSTUP_SOURCE="$(curl https://sh.rustup.rs -sSf)"
    RUSTUP_PATH="$CACHE_DIR/rustup.sh"
    if [ $? -ne 0 ]; then
        echo "Failed fetching rustup installation script!" | indent
        exit 1
    fi

    if [ -d "$CACHE_DIR" ]; then
        mkdir -p "$CACHE_DIR"
    fi

    echo "$RUSTUP_SOURCE" > "$RUSTUP_PATH"
    chmod +x "$RUSTUP_PATH"
    cmd "$RUSTUP_PATH -y --default-toolchain $RUST_TOOLCHAIN"
    rm "$RUSTUP_PATH"
fi

# --- Rust compilation ---
echo "-----> Rust project compilation"

CARGO_COMMAND="$CARGO_BIN build"

if [ ! -z "$RUST_TARGET" ]; then
    CARGO_COMMAND="$CARGO_COMMAND --target $RUST_TARGET"
fi

if [ ! -z "$CARGO_FULL_MANIFEST_PATH" ]; then
    CARGO_COMMAND="$CARGO_COMMAND --manifest-path $CARGO_FULL_MANIFEST_PATH"
fi

if [ ! -z "$BIN" ]; then
    CARGO_COMMAND="$CARGO_COMMAND --bin $BIN"
fi

if [ ! -z "$EXAMPLE" ]; then
    CARGO_COMMAND="$CARGO_COMMAND --example $EXAMPLE"
fi

if [ ! -z "$FEATURES" ]; then
    CARGO_COMMAND="$CARGO_COMMAND --features '$FEATURES'"
fi

if [ ! -z "$ADDITIONAL_CARGO_FLAGS" ]; then
    CARGO_COMMAND="$CARGO_COMMAND $ADDITIONAL_CARGO_FLAGS"
fi

cmd "$CARGO_COMMAND"
