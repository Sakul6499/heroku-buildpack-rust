#!/bin/sh

# --- Directories ---
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

# --- Helper ---
indent() {
    sed -u 's/^/       /'
}

cmd() {
    COMMAND=$1
    
    echo "[exec] $COMMAND" | indent
    export RUSTUP_HOME="$RUSTUP_HOME"
    export CARGO_HOME="$CARGO_HOME" 
    eval "$COMMAND"
    STATUS=$?

    if [ $STATUS -ne 0 ]; then
        echo "Command execution failed with: $STATUS"
        exit $STATUS
    fi
}

# --- Variables ---

export RUSTUP_HOME="$CACHE_DIR/rustup_home"
export CARGO_HOME="$CACHE_DIR/cargo_home"
export CARGO_BIN_DIR="$CARGO_HOME/bin"
export CARGO_BIN="$CARGO_BIN_DIR/cargo"
export RUSTUP_BIN="$CARGO_BIN_DIR/rustup"
export PATH="$CARGO_HOME_DIR:$PATH"
export CARGO_TARGET_DIR="$CACHE_DIR/target"

if [ -f "$ENV_DIR/RELEASE_BUILD" ]; then
    RELEASE_BUILD="$(cat $ENV_DIR/RELEASE_BUILD)"
else
    echo ""
    echo "No RELEASE_BUILD env-var set!" | indent
    echo "Setting to default (true) value." | indent
    
    RELEASE_BUILD="1"
    echo "[env] RELEASE_BUILD: $RELEASE_BUILD" | indent
fi

if [ -f "$ENV_DIR/RUST_TARGET" ]; then
    RUST_TARGET="$(cat $ENV_DIR/RUST_TARGET)"
else
    echo ""
    echo "No RUST_TARGET env-var set!" | indent
    echo "Setting to default value." | indent
    
    RUST_TARGET="x86_64-unknown-linux-gnu"
    echo "[env] RUST_TARGET: $RUST_TARGET" | indent
fi

if [ -f "$ENV_DIR/RUST_CHANNEL" ]; then
    RUST_CHANNEL="$(cat $ENV_DIR/RUST_CHANNEL)"
else
    echo ""
    echo "No RUST_CHANNEL env-var set!" | indent
    echo "Setting to default value." | indent
    
    RUST_CHANNEL="stable"
    echo "[env] RUST_CHANNEL: $RUST_CHANNEL" | indent
fi

RUST_TOOLCHAIN="$RUST_CHANNEL-$RUST_TARGET"

if [ -f "$ENV_DIR/CARGO_WORKSPACE" ]; then
    CARGO_WORKSPACE="$(cat $ENV_DIR/CARGO_WORKSPACE)"
else
    echo ""
    echo "No CARGO_WORKSPACE env-var set!" | indent
    echo "Assuming root to hold cargo workspace." | indent
    CARGO_WORKSPACE="."
fi

if [ -f "$ENV_DIR/MANIFEST_PATH" ]; then
    MANIFEST_PATH="$(cat $ENV_DIR/MANIFEST_PATH)"
else
    echo ""
    echo "No MANIFEST_PATH env-var set!" | indent
    echo "Assuming root to hold cargo manifest." | indent
    MANIFEST_PATH="Cargo.toml"
fi

if [ -f "$ENV_DIR/BIN" ]; then
    BIN="$(cat $ENV_DIR/BIN)"
fi

if [ -f "$ENV_DIR/EXAMPLE" ]; then
    EXAMPLE="$(cat $ENV_DIR/EXAMPLE)"
fi

if [ -f "$ENV_DIR/FEATURES" ]; then
    FEATURES="$(cat $ENV_DIR/FEATURES)"
fi

if [ -f "$ENV_DIR/ADDITIONAL_CARGO_FLAGS" ]; then
    ADDITIONAL_CARGO_FLAGS="$(cat $ENV_DIR/ADDITIONAL_CARGO_FLAGS)"
fi

CARGO_FULL_MANIFEST_PATH="$BUILD_DIR/$CARGO_WORKSPACE/$MANIFEST_PATH"

if [ -f "$ENV_DIR/GIT_SSH_KEY" ]; then
    GIT_SSH_KEY="$(cat $ENV_DIR/GIT_SSH_KEY)"
else
    echo ""
    echo "No GIT_SSH_KEY env-var set!" | indent
    echo "Checking out submodules might not work." | indent
fi

if [ -f "$ENV_DIR/GIT_URL" ]; then
    GIT_URL="$(cat $ENV_DIR/GIT_URL)"
else
    echo ""
    echo "No GIT_URL env-var set!" | indent
    echo "Checking out submodules might not work." | indent
fi

if [ -f "$ENV_DIR/REMOTE_BRANCH" ]; then
    REMOTE_BRANCH="$(cat $ENV_DIR/REMOTE_BRANCH)"
else
    echo ""
    echo "No REMOTE_BRANCH env-var set!" | indent
    echo "Will try to determine the default branch." | indent
fi

if [ -f "$ENV_DIR/DEBUG" ]; then
    DEBUG="$(cat $ENV_DIR/DEBUG)"
fi

if [ -f "$ENV_DIR/INSTALL_WASM_PACK" ]; then
    INSTALL_WASM_PACK="$(cat $ENV_DIR/INSTALL_WASM_PACK)"
fi

if [ -f "$ENV_DIR/INSTALL_SASS" ]; then
    INSTALL_SASS="$(cat $ENV_DIR/INSTALL_SASS)"
fi

# --- Debug directories (before) ---
if [ ! -z "$DEBUG" ] && [ "$DEBUG" -eq 1 ]; then
    echo "-----> Listing content of heroku folders"
    
    echo ""
    echo "Build content:" | indent
    cmd "find $BUILD_DIR | sed -e 's/[^-][^\/]*\// |/g' -e 's/|\([^ ]\)/|-\1/'"

    echo ""
    echo "Cache content:" | indent
    cmd "find $CACHE_DIR | sed -e 's/[^-][^\/]*\// |/g' -e 's/|\([^ ]\)/|-\1/'"

    echo ""
    echo "ENV content:" | indent
    cmd "find $ENV_DIR | sed -e 's/[^-][^\/]*\// |/g' -e 's/|\([^ ]\)/|-\1/'"

    echo ""
    echo "Target content:" | indent
    cmd "find $CARGO_TARGET_DIR | sed -e 's/[^-][^\/]*\// |/g' -e 's/|\([^ ]\)/|-\1/'"
fi

# --- Check Cache ---
echo "-----> Checking cache" 

if [ ! -d "$CACHE_DIR" ]; then
    echo ""
    echo "Did not find cache directory!" | indent
    mkdir -p "$CACHE_DIR"
fi

# --- Submodules ---
echo "-----> Submodules"
echo "-----> Installing SSH Key ..."
mkdir -p ~/.ssh
ssh-keyscan -H github.com >> ~/.ssh/known_hosts 2> /dev/null
cp "$ENV_DIR/GIT_SSH_KEY" ~/.ssh/id_rsa
echo >> ~/.ssh/id_rsa
chmod 600 ~/.ssh/id_rsa

echo "-----> Setting SSH settings ..."
echo "Host *" >> ~/.ssh/config
echo "   StrictHostKeyChecking no" >> ~/.ssh/config
echo "   UserKnownHostsFile /dev/null" >> ~/.ssh/config
echo "   LogLevel ERROR" >> ~/.ssh/config

# Clean build dir (we need to checkout it again ...)
echo "-----> Cleaning Build-Directory"
rm -rf "$BUILD_DIR/*"

# Checkout submodules
cd "$BUILD_DIR"

echo "-----> Initializing repository"
git init
echo "-----> Adding remote"
git remote add origin "$GIT_URL"
echo "-----> Fetching from remote"
git fetch --all

# Get remote default branch
DEFAULT_BRANCH="$(git remote show origin | grep 'HEAD branch' | sed 's/.*: //')"

# Determine branch to pull on
if [ -z "$REMOTE_BRANCH" ]; then
    BRANCH="$DEFAULT_BRANCH"
else
    BRANCH="$REMOTE_BRANCH"
fi

echo "-----> Pulling from '$BRANCH'"
git reset --hard "origin/$BRANCH"

echo "-----> Updating and initializing submodules"
git submodule update --init --recursive | indent
git submodule status | indent

# Move out of build directory
cd ".."

# --- Rust installation ---
echo "-----> Checking Rust, Rustup and Cargo"

echo "# RUSTUP_HOME: $RUSTUP_HOME"
if [ -d "$RUSTUP_HOME" ]; then
    echo "EXISTS"
else
    echo "MISSING"
fi

echo "# CARGO_HOME: $CARGO_HOME"
if [ -d "$CARGO_HOME" ]; then
    echo "EXISTS"
else
    echo "MISSING"
fi

if [ -d "$RUSTUP_HOME" ] && [ -d "$CARGO_HOME" ]; then
    echo "Found rustup and cargo home in cache; Performing updates ..." | indent
    
    cmd "$RUSTUP_BIN self update"
    cmd "$RUSTUP_BIN update "
    cmd "$RUSTUP_BIN default $RUST_TOOLCHAIN"
else
    echo "Failed finding rustup or cargo home in cache; Performing installation ..." | indent

    RUSTUP_SOURCE="$(curl https://sh.rustup.rs -sSf)"
    RUSTUP_PATH="$CACHE_DIR/rustup.sh"
    if [ $? -ne 0 ]; then
        echo "Failed fetching rustup installation script!" | indent
        exit 1
    fi

    if [ -d "$CACHE_DIR" ]; then
        mkdir -p "$CACHE_DIR"
    fi

    echo "$RUSTUP_SOURCE" > "$RUSTUP_PATH"
    chmod +x "$RUSTUP_PATH"
    cmd "$RUSTUP_PATH -y --default-toolchain $RUST_TOOLCHAIN"
    rm "$RUSTUP_PATH"
fi

# --- Install WASM-Pack ---
if [ "$INSTALL_WASM_PACK" -eq 1 ]; then
    echo "-----> Installing WASM-Pack"

    cmd "$CARGO_BIN install wasm-pack"
fi

# --- Install SASS ---
if [ "$INSTALL_SASS" -eq 1 ]; then
    echo "-----> Installing SASS-Compiler"

    wget https://github.com/sass/dart-sass/releases/download/1.32.0/dart-sass-1.32.0-linux-x64.tar.gz
    tar -xvf "dart-sass-1.32.0-linux-x64.tar.gz"

    ls -al "$CACHE_DIR"
    ls -al "$CACHE_DIR/dart-sass"
    export PATH="$PATH:$CACHE_DIR/dart-sass"

    rm "dart-sass*.tar.gz"
fi

# --- Rust compilation ---
echo "-----> Rust project compilation"

CARGO_COMMAND="$CARGO_BIN build"

if [ "$RELEASE_BUILD" -eq 1 ]; then
    CARGO_COMMAND="$CARGO_COMMAND --release"
fi

if [ ! -z "$RUST_TARGET" ]; then
    CARGO_COMMAND="$CARGO_COMMAND --target $RUST_TARGET"
fi

if [ ! -z "$CARGO_FULL_MANIFEST_PATH" ]; then
    CARGO_COMMAND="$CARGO_COMMAND --manifest-path $CARGO_FULL_MANIFEST_PATH"
fi

if [ ! -z "$BIN" ]; then
    CARGO_COMMAND="$CARGO_COMMAND --bin $BIN"
fi

if [ ! -z "$EXAMPLE" ]; then
    CARGO_COMMAND="$CARGO_COMMAND --example $EXAMPLE"
fi

if [ ! -z "$FEATURES" ]; then
    CARGO_COMMAND="$CARGO_COMMAND --features '$FEATURES'"
fi

if [ ! -z "$ADDITIONAL_CARGO_FLAGS" ]; then
    CARGO_COMMAND="$CARGO_COMMAND $ADDITIONAL_CARGO_FLAGS"
fi

cmd "$CARGO_COMMAND"

echo "-----> Copy target from cache"
cp -r "$CARGO_TARGET_DIR" "$BUILD_DIR"

# --- Debug directories (after) ---
if [ ! -z "$DEBUG" ] && [ "$DEBUG" -eq 1 ]; then
    echo "-----> Listing content of heroku folders"
    
    echo ""
    echo "Build content:" | indent
    cmd "find $BUILD_DIR | sed -e 's/[^-][^\/]*\// |/g' -e 's/|\([^ ]\)/|-\1/'"

    echo ""
    echo "Cache content:" | indent
    cmd "find $CACHE_DIR | sed -e 's/[^-][^\/]*\// |/g' -e 's/|\([^ ]\)/|-\1/'"

    echo ""
    echo "ENV content:" | indent
    cmd "find $ENV_DIR | sed -e 's/[^-][^\/]*\// |/g' -e 's/|\([^ ]\)/|-\1/'"

    echo ""
    echo "Target content:" | indent
    cmd "find $CARGO_TARGET_DIR | sed -e 's/[^-][^\/]*\// |/g' -e 's/|\([^ ]\)/|-\1/'"
fi
